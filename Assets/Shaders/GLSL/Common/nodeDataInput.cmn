#ifndef _NODE_DATA_INPUT_CMN_
#define _NODE_DATA_INPUT_CMN_

#include "utility.cmn"

#if defined(GEOM_SHADER)
#define InBlock gl_in[];
#else //GEOM_SHADER
#define InBlock gl_in[gl_MaxPatchVertices];
#endif //GEOM_SHADER

#if defined(TESS_CTRL_SHADER)
#define OutBlock gl_out[];
#else //TESS_CTRL_SHADER
#define OutBlock ;
#endif //TESS_CTRL_SHADER

#if !defined(COMPUTE_SHADER) && !defined(FRAG_SHADER)

#if defined(GEOM_SHADER) || defined(TESS_CTRL_SHADER) || defined(TESS_EVAL_SHADER)
in gl_PerVertex
{
  vec4  gl_Position;
  float gl_PointSize;
#if !defined(NO_CLIP_CULL_IN)
  float gl_ClipDistance[MAX_CLIP_PLANES];
  float gl_CullDistance[MAX_CULL_DISTANCES];
#endif //!NO_CLIP_CULL_IN
} InBlock
#endif //GEOM_SHADER || TESS_CTRL_SHADER || TESS_EVAL_SHADER

out gl_PerVertex
{
  invariant vec4 gl_Position;
  float gl_PointSize;
#if !defined(NO_CLIP_CULL_OUT)
  float gl_ClipDistance[MAX_CLIP_PLANES];
  float gl_CullDistance[MAX_CULL_DISTANCES];
#endif //!NO_CLIP_CULL_OUT
} OutBlock

#endif //!COMPUTE_SHADER && !FRAG_SHADER

DESCRIPTOR_SET_RESOURCE_LAYOUT(PER_BATCH, 1, std140) uniform dvd_CamBlock
{
    mat4  dvd_ProjectionMatrix;
    mat4  dvd_ViewMatrix;
    mat4  dvd_ViewProjectionMatrix;
    mat4  dvd_InverseViewMatrix;
    mat4  dvd_WorldAOVPMatrix;
    mat4  dvd_PrevViewProjectionMatrix;
    vec4  dvd_ViewPort;
    //x - scale, y - bias, z - light bleed bias, w - min shadow variance
    vec4  dvd_lightingTweakValues;
    //x - nearPlane, y - farPlane, z - FoV, w - clip plane count
    vec4  dvd_camProperties;
    //xy - depth range, zw - light cluster size X / Y
    vec4  dvd_renderTargetInfo;
    vec4  dvd_clipPlanes[MAX_CLIP_PLANES];
    vec4 _padding_;
};

#define DEPTH_RANGE dvd_renderTargetInfo.xy
#define SHADOW_PASS_TYPE int(dvd_camProperties.w)
#define CAMERA_FLAG SHADOW_PASS_TYPE


#define dvd_ClusterSizes dvd_renderTargetInfo.zw
#define dvd_ScreenDimensions dvd_ViewPort.zw
#define dvd_CameraPosition (dvd_InverseViewMatrix[3].xyz)
#define dvd_AspectRatio (dvd_ViewPort.z / dvd_ViewPort.w)
#define dvd_ZPlanes dvd_camProperties.xy
#define dvd_FieldOfView dvd_camProperties.z
#define dvd_ClipPlaneCount uint(dvd_camProperties.w)

#define dvd_LightScale dvd_lightingTweakValues.x
#define dvd_LightBias dvd_lightingTweakValues.y
#define dvd_LightBleedBias dvd_lightingTweakValues.z
#define dvd_MinVariance dvd_lightingTweakValues.w

#if !defined(COMPUTE_SHADER) && !defined(FRAG_SHADER)

#if defined(TESS_CTRL_SHADER)
#if !defined(NO_CLIP_CULL_OUT)
#define CLIP_OUTPUT(X) gl_out[gl_InvocationID].gl_ClipDistance[X]
#endif //!NO_CLIP_CULL_OUT
#define OUT _out[gl_InvocationID]
#else
#if !defined(NO_CLIP_CULL_OUT)
#define CLIP_OUTPUT(X) gl_ClipDistance[X]
#endif //!NO_CLIP_CULL_OUT
#define OUT _out
#endif

#if !defined(NO_CLIP_CULL_OUT)
#define CLIP_INDEX(X) CLIP_OUTPUT(X) = (dvd_ClipPlaneCount > X) ? dot(OUT._vertexW, dvd_clipPlanes[X]) : 0.f

#if MAX_CLIP_PLANES == 1
#define setClipPlanes() \
    CLIP_INDEX(0);
#elif MAX_CLIP_PLANES == 2
#define setClipPlanes() \
    CLIP_INDEX(0);      \
    CLIP_INDEX(1);
#elif MAX_CLIP_PLANES == 3
#define setClipPlanes() \
    CLIP_INDEX(0);      \
    CLIP_INDEX(1);      \
    CLIP_INDEX(2);
#elif MAX_CLIP_PLANES == 4
#define setClipPlanes() \
    CLIP_INDEX(0);      \
    CLIP_INDEX(1);      \
    CLIP_INDEX(2);      \
    CLIP_INDEX(3);
#elif MAX_CLIP_PLANES == 5
#define setClipPlanes() \
    CLIP_INDEX(0);      \
    CLIP_INDEX(1);      \
    CLIP_INDEX(2);      \
    CLIP_INDEX(3);      \
    CLIP_INDEX(4);
#else 
#define setClipPlanes() \
    CLIP_INDEX(0);      \
    CLIP_INDEX(1);      \
    CLIP_INDEX(2);      \
    CLIP_INDEX(3);      \
    CLIP_INDEX(4);      \
    CLIP_INDEX(5);
#endif //MAX_CLIP_PLANES
#endif //!NO_CLIP_CULL_OUT
#endif //!COMPUTE_SHADER && !FRAG_SHADER

#endif //_NODE_DATA_INPUT_CMN_
