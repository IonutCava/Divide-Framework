#ifndef _UTILITY_CMN_
#define _UTILITY_CMN_

//ref: http://theorangeduck.com/page/avoiding-shader-conditionals
#define when_eq(x, y) (1.f - abs(sign(x - y)))
#define when_neq(x, y) abs(sign(x - y))
#define when_gt(x, y)  max(sign(x - y), 0.f)
#define when_lt(x, y)  max(sign(y - x), 0.f)
#define when_ge(x, y) (1.f - when_lt(x, y))
#define when_le(x, y) (1.f - when_gt(x, y))
//avoiding-shader-conditionals

// easing functions
#define easeInSine(X)  (1.f - cos((X * M_PI) * 0.5f))
#define easeOutSine(X) (sin((X * M_PI) * 0.5f))
#define easeInOutSine(X) (-(cos(M_PI * X) - 1) * 0.5f)
#define easeInQuad(X) (X * X)
#define easeOutQuad(X) (1.f - (1.f - X) * (1.f - X))
#define easeInOutQuad(X) (X < 0.5.f ? 2.f * X * X : 1.f - pow(-2 * X + 2, 2) * 0.5f)
#define easeInCubic(X) (X * X * X)
#define easeOutCubic(X) (1.f - pow(1.f - X, 3))
#define easeInOutCubic(X) (X < 0.5f ? 4 * X * X * X : 1.f - pow(-2 * X + 2, 3) * 0.5f)
#define easeInQuart(X) (X * X * X * X)
#define easeOutQuart(X) (1.f - pow(1 - X, 4))
#define easeInOutQuart(X) (X < 0.5f ? 8 * X * X * X * X : 1.f - pow(-2 * X + 2, 4) * 0.5f)
#define easeInQuint(X) (X * X * X * X * X)
#define easeOutQuint(X) (1.f - pow(1 - X, 5))
#define easeInOutQuint(X) (X < 0.5f ? 16 * X * X * X * X * X : 1.f - pow(-2 * X + 2, 5) * 0.5f)
#define easeInEXpo(X) (X == 0.f ? 0.f : pow(2.f, 10 * X - 10))
#define easeOutEXpo(X) (X == 1.f ? 1.f : 1.f - pow(2.f, -10 * X))
#define easeInOutEXpo(X) (X == 0.f ? 0.f : X == 1.f ? 1.f : X < 0.5f ? pow(2f, 20 * X - 10) * 0.5f : (2.f - pow(2, -20 * X + 10)) * 0.5f)
#define easeInCirc(X) (1.f - sqrt(1.f - pow(X, 2)))
#define easeOutCirc(X) (sqrt(1.f - pow(X - 1, 2)))
#define easeInOutCirc(X) (X < 0.5f ? (1.f - sqrt(1.f - pow(2 * X, 2))) * 0.5f : (sqrt(1.f - pow(-2 * X + 2, 2)) + 1.f) * 0.5f)
#define easeInBack(X) (const float c1 = 1.70158f; const float c3 = c1 + 1; c3 * X * X * X - c1 * X * X)
#define easeOutBack(X) (const float c1 = 1.70158f; const float c3 = c1 + 1; 1 + c3 * pow(X - 1, 3) + c1 * pow(X - 1, 2))
#define easeInOutBack(X) (const float c1 = 1.70158f; const float c2 = c1 * 1.525f; X < 0.5f ? (pow(2 * X, 2) * ((c2 + 1) * 2 * X - c2)) * 0.5f : (pow(2 * X - 2, 2) * ((c2 + 1) * (X * 2 - 2) + c2) + 2) * 0.5f)
#define easeInElastic(X) (const float c4 = (2 * M_PI) / 3.f; X == 0 ? 0 : X == 1 ? 1 : -pow(2, 10 * X - 10) * sin((X * 10 - 10.75f) * c4))
#define easeOutElastic(X) (const float c4 = (2 * M_PI) / 3.f; X == 0 ? 0 : X == 1 ? 1 : pow(2, -10 * X) * sin((X * 10 - 0.75f) * c4) + 1)
#define easeInOutElastic(X) (const float c5 = (2 * M_PI) / 4.5f; X == 0 ? 0 : X == 1 ? 1 : X < 0.5f ? -(pow(2, 20 * X - 10) * sin((20 * X - 11.125f) * c5)) * 0.5f : (pow(2, -20 * X + 10) * sin((20 * X - 11.125f) * c5)) * 0.5f + 1)
#define easeOutBounce(X) (const float n1 = 7.5625f; const float d1 = 2.75f; if (X < 1 / d1) { n1 * X * X} else if (X < 2 / d1) { n1 * (X -= 1.5f / d1) * X + 0.75}  else if (X < 2.5f / d1) { n1 * (X -= 2.25f / d1) * X + 0.9375f}  } else { n1 * (X -= 2.625f / d1) * X + 0.984375f})
#define easeInBounce(X) (1.f - easeOutBounce(1.f - X))
#define easeInOutBounce(X) (X < 0.5f ? (1 - easeOutBounce(1 - 2 * X)) * 0.5f: (1 + easeOutBounce(2 * X - 1)) * 0.5f)
// easing functions

// Can't use as a define because
vec3 Homogenize( in vec4 v ) { return v.xyz / v.w; }

#define MSToSeconds(ms) (ms * 0.001f)
#define ReMap(V, Min0, Max0, Min1, Max1) ((Min1) + ((((V) - (Min0)) / ((Max0) - (Min0))) * ((Max1) - (Min1))))
#define ScaledTextureCoords(UV, SCALE) ((UV) * (SCALE))

#define ViewSpaceZ(DEPTH, INV_PROJ_MAT) (-1.f / (INV_PROJ_MAT[2][3] * DEPTH + INV_PROJ_MAT[3][3]))
#define ViewSpacePos(TEX_COORD, DEPTH, INV_PROJ_MAT) Homogenize( INV_PROJ_MAT * vec4( 2.f * TEX_COORD - 1.f, DEPTH, 1.f ) )
#define ToLinearDepth(DEPTH, ZPLANES) (2.f * (ZPLANES).x * (ZPLANES).y / ((ZPLANES).y + (ZPLANES).x - DEPTH * ((ZPLANES).y - (ZPLANES).x)))

#define QuaternionRotate(Q, V) (V + 2.f * cross(Q.xyz, cross(Q.xyz, V) + Q.w * V))

#define QuaternionInverse(Q) vec4(-Q.xyz, Q.w)

vec4 QuaternionDot(in vec4 q1, in vec4 q2)
{
    const vec3 v = cross(q1.xyz, q2.xyz) + q1.w * q2.xyz + q2.w * q1.xyz;
    const float scalar = q1.w * q2.w - dot(q1.xyz, q2.xyz);
    return vec4(v, scalar);
}

vec3 QuaternionMultiply(const vec4 q, const vec3 v)
{
    return QuaternionDot(q, QuaternionDot(vec4(v, 0.f), QuaternionInverse(q))).xyz;
}

#endif //_UTILITY_CMN_
