set(AVX512F_OPT OFF)
set(AVX512VL_OPT OFF)
set(AVX512DQ_OPT OFF)
set(AVX2_OPT OFF)
set(AVX_OPT OFF)
set(SSE41_OPT OFF)
set(SSE42_OPT OFF)
set(SSE4A_OPT OFF)
set(FMA_OPT OFF)
set(FMA4_OPT OFF)
set(BMI1_OPT OFF)
set(BMI2_OPT OFF)
set(POPCNT_OPT OFF)
set(LZCNT_OPT OFF)
set(F16C_OPT OFF)
set(NEON_OPT OFF)
set(ROSETTA2_TARGET OFF)
set(EXTENSIONS "")

# Function to detect if we're targeting Rosetta 2 (x86_64 on Apple Silicon)
function(detect_rosetta2_target)
    if(MAC_OS_BUILD AND CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
        # Check if we're running on Apple Silicon
        execute_process(
            COMMAND sysctl -n machdep.cpu.brand_string
            OUTPUT_VARIABLE CPU_BRAND
            OUTPUT_STRIP_TRAILING_WHITESPACE
            ERROR_QUIET
        )
        
        if(CPU_BRAND MATCHES "Apple")
            set(ROSETTA2_TARGET ON PARENT_SCOPE)
            message(STATUS "Detected Rosetta 2 target: x86_64 build on Apple Silicon")
        else()
            set(ROSETTA2_TARGET OFF PARENT_SCOPE)
        endif()
    else()
        set(ROSETTA2_TARGET OFF PARENT_SCOPE)
    endif()
endfunction()

function (Toggle_Available_Vector_Extensions)
    # First detect if we're targeting Rosetta 2
    detect_rosetta2_target()
    
    # If targeting Rosetta 2, override with safe extensions
    if(ROSETTA2_TARGET)
        message(STATUS "Rosetta 2 target detected - using SSE4.2/POPCNT/LZCNT, disabling AVX/NEON")
        set(SSE41_OPT ON)
        set(SSE42_OPT ON)
        set(POPCNT_OPT ON)
        set(LZCNT_OPT ON)
        set(NEON_OPT OFF)
        set(TARGET_ARCHITECTURE "Rosetta2")
    else()
        OptimizeForArchitecture()
    endif()

    # Only process detected extensions if not overridden by Rosetta 2
    if(NOT ROSETTA2_TARGET)
        foreach(flag ${_enable_vector_unit_list})
        string(TOUPPER "${flag}" flag)

        if ( "${flag}" STREQUAL "NEON")
            set(NEON_OPT ON)
        elseif( "${flag}" STREQUAL "AVX512F")
            set(AVX512F_OPT ON)
        elseif( "${flag}" STREQUAL "AVX512VL")
            set(AVX512VL_OPT ON)
        elseif( "${flag}" STREQUAL "AVX512DQ")
            set(AVX512DQ_OPT ON)
        elseif("${flag}" STREQUAL "AVX2")
            set(AVX2_OPT ON)
        elseif("${flag}" STREQUAL "AVX")
            set(AVX_OPT ON)
        elseif("${flag}" STREQUAL "SSE4.2")
            set(SSE42_OPT ON)
        elseif("${flag}" STREQUAL "SSE4.1")
            set(SSE41_OPT ON)
        elseif("${flag}" STREQUAL "SSE4A")
            set(SSE4A_OPT ON)
        elseif("${flag}" STREQUAL "FMA")
            set(FMA_OPT ON)
        elseif("${flag}" STREQUAL "FMA4")
            set(FMA4_OPT ON)
        elseif("${flag}" STREQUAL "BMI")
            set(BMI1_OPT ON)
        elseif("${flag}" STREQUAL "BMI2")
            set(BMI2_OPT ON)
        elseif("${flag}" STREQUAL "LZCNT")
            set(LZCNT_OPT ON)
        elseif("${flag}" STREQUAL "POPCNT")
            set(POPCNT_OPT ON)
        elseif("${flag}" STREQUAL "F16C")
            set(F16C_OPT ON)
        endif()

        endforeach(flag)
    endif() # End of NOT ROSETTA2_TARGET

    # Apply cascading logic only for non-Rosetta2 targets
    if(NOT ROSETTA2_TARGET)
        if ( AVX512F_OPT OR AVX512VL_OPT OR AVX512DQ_OPT )
            set(AVX2_OPT ON)
            set(BMI2_OPT ON)
        endif()

        if ( AVX2_OPT )
            set(AVX_OPT ON)
            set(F16C_OPT ON)
            set(BMI1_OPT ON)
            set(FMA_OPT ON)
        endif()
        if ( AVX_OPT )
            set(SSE42_OPT ON)
            set(SSE4A_OPT ON)
        endif()

        if ( SSE42_OPT)
            set(SSE41_OPT ON)
            set(LZCNT_OPT ON)
            set(POPCNT_OPT ON)
        endif()
    endif()

    if (NOT SSE41_OPT AND NOT NEON_OPT)
        message(FATAL_ERROR "SSE4.1 or NEON was not detected. SSE4.1 or NEON is a minimum requirement in order for the build to proceed!")
    endif()

    if ( WINDOWS_OS_BUILD )

        if ( AVX512F_OPT AND AVX512VL_OPT AND AVX512DQ_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " /arch:AVX512")
        elseif(AVX2_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " /arch:AVX2")
        elseif(AVX_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " /arch:AVX")
        endif()

    else() #WINDOWS_OS_BUILD

        if ( NEON_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -march=armv8-a+fp+simd")
        endif()

        if ( AVX512F_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx512f")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-avx512f")
        endif()

        if ( AVX512VL_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx512vl")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-avx512vl")
        endif()

        if ( AVX512DQ_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx512dq")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-avx512dq")
        endif()

        if (AVX2_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx2")
        elseif (AVX_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -mavx -mno-avx2")
        elseif (SSE42_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -msse4.2 -mno-avx -mno-avx2")
        elseif (SSE41_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -msse4.1 -mno-sse4.2 -mno-avx -mno-avx2")
        endif()

        if (SSE4A_OPT)
            list(APPEND EXTRA_COMPILE_FLAGS " -msse4a")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-sse4a")
        endif()
    endif () #WINDOWS_OS_BUILD

    if ( NOT MSVC_COMPILER )
        if ( FMA_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mfma")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-fma")
        endif()
        
        if ( FMA4_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mfma4")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-fma4")
        endif()

        if ( BMI1_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mbmi")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-bmi")
        endif()
         
        if ( BMI2_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mbmi2")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-bmi2")
        endif()
        
        if ( LZCNT_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mlzcnt")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-lzcnt")
        endif()

        if ( POPCNT_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -mpopcnt")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-popcnt")
        endif()

        if ( F16C_OPT )
            list(APPEND EXTRA_COMPILE_FLAGS " -f16c")
        else()
            list(APPEND EXTRA_COMPILE_FLAGS " -mno-f16c")
        endif()

    endif() #NOT MSVC_COMPILER

    if (NEON_OPT)
        list(APPEND EXTENSIONS "NEON")
        list(APPEND EXTRA_DEFINITIONS HAS_NEON)
    else()
        list(APPEND EXTENSIONS "NO-NEON")
    endif()

    if (AVX512F_OPT)
        set(EXTENSIONS "AVX512F")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX512F)
    else()
        set(EXTENSIONS "NO-AVX512F")
    endif()

    if (AVX512VL_OPT)
        list(APPEND EXTENSIONS ", AVX512VL")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX512VL)
    else()
        list(APPEND EXTENSIONS ", NO-AVX512VL")
    endif()

    if (AVX512DQ_OPT)
        list(APPEND EXTENSIONS ", AVX512DQ")
        list(APPEND EXTRA_DEFINITIONS AVX512DQ)
    else()
        list(APPEND EXTENSIONS ", NO-AVX512DQ")
    endif()

    if (AVX2_OPT)
        list(APPEND EXTENSIONS ", AVX2")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX2)
    else()
        list(APPEND EXTENSIONS ", NO-AVX2")
    endif()

    if (AVX_OPT)
        list(APPEND EXTENSIONS ", AVX")
        list(APPEND EXTRA_DEFINITIONS HAS_AVX)
    else()
        list(APPEND EXTENSIONS ", NO-AVX")
    endif()

    if (SSE42_OPT)
        list(APPEND EXTENSIONS ", SSE4.2")
        list(APPEND EXTRA_DEFINITIONS HAS_SSE42)
    else()
        list(APPEND EXTENSIONS ", NO-SSE4.2")
    endif()

    if (SSE4A_OPT)
        list(APPEND EXTENSIONS ", SSE4A")
        list(APPEND EXTRA_DEFINITIONS HAS_SSE4A)
    else()
        list(APPEND EXTENSIONS ", NO-SSE4A")
    endif()

    if (SSE41_OPT)
        list(APPEND EXTENSIONS ", SSE4.1")
        list(APPEND EXTRA_DEFINITIONS HAS_SSE41)
    else()
        list(APPEND EXTENSIONS ", NO-SSE4.1")
    endif()

    if ( FMA_OPT )
        list(APPEND EXTENSIONS ", FMA")
        list(APPEND EXTRA_DEFINITIONS HAS_FMA)
    else()
        list(APPEND EXTENSIONS ", NO-FMA")
    endif()
        
    if ( FMA4_OPT )
        list(APPEND EXTENSIONS ", FMA4")
        list(APPEND EXTRA_DEFINITIONS HAS_FMA4)
    else()
        list(APPEND EXTENSIONS ", NO-FMA4")
    endif()

    if ( BMI1_OPT )
        list(APPEND EXTENSIONS ", BMI")
        list(APPEND EXTRA_DEFINITIONS HAS_BMI1)
    else()
        list(APPEND EXTENSIONS ", NO_BMI")
    endif()
         
    if ( BMI2_OPT )
        list(APPEND EXTENSIONS ", BMI2")
        list(APPEND EXTRA_DEFINITIONS HAS_BMI2)
    else()
        list(APPEND EXTENSIONS ", NO-BMI2")
    endif()
        
    if ( LZCNT_OPT )
        list(APPEND EXTENSIONS ", LZCNT")
        list(APPEND EXTRA_DEFINITIONS HAS_LZCNT)
    else()
        list(APPEND EXTENSIONS ", NO-LZCNT")
    endif()

    if ( POPCNT_OPT )
        list(APPEND EXTENSIONS ", POPCNT")
        list(APPEND EXTRA_DEFINITIONS HAS_POPCNT)
    else()
        list(APPEND EXTENSIONS ", NO-POPCNT")
    endif()

    if ( F16C_OPT )
        list(APPEND EXTENSIONS ", F16C")
        list(APPEND EXTRA_DEFINITIONS HAS_F16C)
    else()
        list(APPEND EXTENSIONS ", NO-F16C")
    endif()

    set(AVX512F_OPT        ${AVX512F_OPT}       PARENT_SCOPE)
    set(AVX512VL_OPT       ${AVX512VL_OPT}      PARENT_SCOPE)
    set(AVX512DQ_OPT       ${AVX512DQ_OPT}      PARENT_SCOPE)
    set(AVX2_OPT           ${AVX2_OPT}          PARENT_SCOPE)
    set(AVX_OPT            ${AVX_OPT}           PARENT_SCOPE)
    set(SSE42_OPT          ${SSE42_OPT}         PARENT_SCOPE)
    set(SSE41_OPT          ${SSE41_OPT}         PARENT_SCOPE)
    set(SSE4A_OPT          ${SSE4A_OPT}         PARENT_SCOPE)
    set(FMA_OPT            ${FMA_OPT}           PARENT_SCOPE)
    set(FMA4_OPT           ${FMA4_OPT}          PARENT_SCOPE)
    set(BMI1_OPT           ${BMI1_OPT}          PARENT_SCOPE)
    set(BMI2_OPT           ${BMI2_OPT}          PARENT_SCOPE)
    set(LZCNT_OPT          ${LZCNT_OPT}         PARENT_SCOPE)
    set(POPCNT_OPT         ${POPCNT_OPT}        PARENT_SCOPE)
    set(F16C_OPT           ${F16C_OPT}          PARENT_SCOPE)
    set(ROSETTA2_TARGET    ${ROSETTA2_TARGET}   PARENT_SCOPE)
    set(EXTENSIONS         ${EXTENSIONS}        PARENT_SCOPE)
    set(EXTRA_DEFINITIONS  ${EXTRA_DEFINITIONS} PARENT_SCOPE)

    message("Found target architecture [ " ${TARGET_ARCHITECTURE} " ] with the following available extensions: "${EXTENSIONS})
    message("Extension specific compiler options: "${EXTRA_COMPILE_FLAGS})

endfunction()
