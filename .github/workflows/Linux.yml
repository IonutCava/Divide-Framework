# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Linux Builds

on:
  schedule:
    - cron: "0 0 * * *"
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    
jobs:
  check_date:
    runs-on: ubuntu-24.04
    name: Check latest commit
    outputs:
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - uses: actions/checkout@v2
      - name: print latest_commit
        run: echo ${{ github.sha }}

      - id: should_run
        continue-on-error: true
        name: check latest commit is less than a day
        if: ${{ github.event_name == 'schedule' }}
        run: test -z $(git rev-list  --after="24 hours" ${{ github.sha }}) && echo "should_run=false" >> "$GITHUB_OUTPUT"

  info_job:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    name: Ubuntu 24-04 - Print Info
    runs-on: ${{ matrix.os }}
    #runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]

    steps:
    - name: Print GCC version
      run: g++ --version 

    - name: Print CLANG version
      run: clang --version 

  gcc_job_editor:
    needs: info_job

    name: Ubuntu 24-04 - GCC Editor Builds
    runs-on: ${{ matrix.os }}
    #runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        # This one is deliberately pointing to a non existing directory (so that vcpkg is not identified as a submodule of this repository).
        vcpkgDirectory: '${{ github.workspace }}/vcpkg_none'
        vcpkgJsonGlob: '${{ github.workspace }}/vcpkg-configuration.json'

    # from: https://github.com/apache/flink/blob/02d30ace69dc18555a5085eccf70ee884e73a16e/tools/azure-pipelines/free_disk_space.sh
    - name: Remove large packages
      id: clean
      run: |
        echo "=============================================================================="
        echo "Freeing up disk space on CI system"
        echo "=============================================================================="

        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell-lts
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
        echo "Removing large directories"
        # deleting 15GB
        rm -rf /usr/share/dotnet/
        df -h

    - name: Install extra required packages
      run: sudo apt-get install -y lld libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev autoconf automake libtool pkg-config libltdl-dev

    - name: List $RUNNER_WORKSPACE before build
      run: find $RUNNER_WORKSPACE
      shell: bash

    - name: Print output of run-vcpkg's action.
      run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

    - name: Build and test Editor in Release mode
      uses: lukka/run-cmake@v10
      id: runcmake_editor_release
      with:
        configurePreset: 'linux-gcc-editor'
        buildPreset: 'linux-gcc-release-editor'
        testPreset: 'test-linux-gcc-release-editor'

    - name: Build and test Editor in Profile mode
      uses: lukka/run-cmake@v10
      id: runcmake_editor_profile
      with:
        configurePreset: 'linux-gcc-editor'
        buildPreset: 'linux-gcc-profile-editor'
        testPreset: 'test-linux-gcc-profile-editor'

    - name: Build and test Editor in Debug mode
      uses: lukka/run-cmake@v10
      id: runcmake_editor_debug
      with:
        configurePreset: 'linux-gcc-editor'
        buildPreset: 'linux-gcc-debug-editor'
        testPreset: 'test-linux-gcc-debug-editor'

  gcc_job_game:
    needs: info_job

    name: Ubuntu 24-04 - GCC Game Builds
    runs-on: ${{ matrix.os }}
    #runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1

    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        # This one is deliberately pointing to a non existing directory (so that vcpkg is not identified as a submodule of this repository).
        vcpkgDirectory: '${{ github.workspace }}/vcpkg_none'
        vcpkgJsonGlob: '${{ github.workspace }}/vcpkg-configuration.json'

    # from: https://github.com/apache/flink/blob/02d30ace69dc18555a5085eccf70ee884e73a16e/tools/azure-pipelines/free_disk_space.sh
    - name: Remove large packages
      id: clean
      run: |
        echo "=============================================================================="
        echo "Freeing up disk space on CI system"
        echo "=============================================================================="

        echo "Listing 100 largest packages"
        dpkg-query -Wf '${Installed-Size}\t${Package}\n' | sort -n | tail -n 100
        df -h
        echo "Removing large packages"
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y azure-cli google-chrome-stable firefox powershell-lts
        sudo apt-get autoremove -y
        sudo apt-get clean
        df -h
        echo "Removing large directories"
        # deleting 15GB
        rm -rf /usr/share/dotnet/
        df -h

    - name: Install extra required packages
      run: sudo apt-get install -y libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev autoconf automake libtool pkg-config libltdl-dev

    - name: List $RUNNER_WORKSPACE before build
      run: find $RUNNER_WORKSPACE
      shell: bash

    - name: Print output of run-vcpkg's action.
      run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

    - name: Build and test Game in Release mode
      uses: lukka/run-cmake@v10
      id: runcmake_game_release
      with:
        configurePreset: 'linux-gcc'
        buildPreset: 'linux-gcc-release'
        testPreset: 'test-linux-gcc-release'

    - name: Build and test Game in Profile mode
      uses: lukka/run-cmake@v10
      id: runcmake_game_profile
      with:
        configurePreset: 'linux-gcc'
        buildPreset: 'linux-gcc-profile'
        testPreset: 'test-linux-gcc-profile'

    - name: Build and test Game in Debug mode
      uses: lukka/run-cmake@v10
      id: runcmake_game_debug
      with:
        configurePreset: 'linux-gcc'
        buildPreset: 'linux-gcc-debug'
        testPreset: 'test-linux-gcc-debug'

  clang_job_editor:
    needs: info_job

    name: Ubuntu 24-04 - Clang Editor Builds
    runs-on: ${{ matrix.os }}
    #runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1
  
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        # This one is deliberately pointing to a non existing directory (so that vcpkg is not identified as a submodule of this repository).
        vcpkgDirectory: '${{ github.workspace }}/vcpkg_none'
        vcpkgJsonGlob: '${{ github.workspace }}/vcpkg-configuration.json'

    - name: Install extra required packages
      run: sudo apt-get install -y libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev autoconf automake libtool pkg-config libltdl-dev

    - name: List $RUNNER_WORKSPACE before build
      run: find $RUNNER_WORKSPACE
      shell: bash

    - name: Print output of run-vcpkg's action.
      run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

    - name: Build and test Editor in Release mode
      uses: lukka/run-cmake@v10
      id: runcmake_editor_release
      with:
        configurePreset: 'linux-clang-editor'
        buildPreset: 'linux-clang-release-editor'
        testPreset: 'test-linux-clang-release-editor'

    #- name: Build and test Editor in Profile mode
    #  uses: lukka/run-cmake@v10
    #  id: runcmake_editor_profile
    #  with:
    #    configurePreset: 'linux-clang-editor'
    #    buildPreset: 'linux-clang-profile-editor'
    #    testPreset: 'test-linux-clang-profile-editor'

    - name: Build and test Editor in Debug mode
      uses: lukka/run-cmake@v10
      id: runcmake_editor_debug
      with:
        configurePreset: 'linux-clang-editor'
        buildPreset: 'linux-clang-debug-editor'
        testPreset: 'test-linux-clang-debug-editor'

  clang_job_game:
    needs: info_job

    name: Ubuntu 24-04 - Clang Game Builds
    runs-on: ${{ matrix.os }}
    #runs-on: self-hosted
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true
        fetch-depth: 0

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.29.2
        ninjaVersion: 1.11.1
  
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      id: runvcpkg
      with:
        # This one is deliberately pointing to a non existing directory (so that vcpkg is not identified as a submodule of this repository).
        vcpkgDirectory: '${{ github.workspace }}/vcpkg_none'
        vcpkgJsonGlob: '${{ github.workspace }}/vcpkg-configuration.json'

    - name: Install extra required packages
      run: sudo apt-get install -y libxi-dev libgl1-mesa-dev libglu1-mesa-dev mesa-common-dev libxrandr-dev libxxf86vm-dev autoconf automake libtool pkg-config libltdl-dev

    - name: List $RUNNER_WORKSPACE before build
      run: find $RUNNER_WORKSPACE
      shell: bash

    - name: Print output of run-vcpkg's action.
      run: echo "root='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}', triplet='${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_DEFAULT_TRIPLET_OUT }}' "

    - name: Build and test Game in Release mode
      uses: lukka/run-cmake@v10
      id: runcmake_game_release
      with:
        configurePreset: 'linux-clang'
        buildPreset: 'linux-clang-release'
        testPreset: 'test-linux-clang-release'

    #- name: Build and test Game in Profile mode
    #  uses: lukka/run-cmake@v10
    #  id: runcmake_game_profile
    #  with:
    #    configurePreset: 'linux-clang'
    #    buildPreset: 'linux-clang-profile'
    #    testPreset: 'test-linux-clang-profile'

    - name: Build and test Game in Debug mode
      uses: lukka/run-cmake@v10
      id: runcmake_game_debug
      with:
        configurePreset: 'linux-clang'
        buildPreset: 'linux-clang-debug'
        testPreset: 'test-linux-clang-debug'
        
  output_job:
    needs: [gcc_job_game, gcc_job_editor, clang_job_game, clang_job_editor]

    name: Finished builds
    runs-on: ubuntu-24.04
    if: always()
    steps:
      - name: Retrieve results
        run: |
          result=""
          if [[ "$\{{ contains(needs.gcc_job_game.result, 'failure') }}" == "true" || "$\{{ contains(needs.gcc_job_editor.result, 'failure') }}" == "true" ]]; then
            result="GCC builds failed."
          elif [[ "$\{{ contains(needs.clang_job_game.result, 'failure') }}" == "true" || "$\{{ contains(needs.clang_job_editor.result, 'failure') }}" == "true" ]]; then
            result="CLANG builds failed."
          elif [[ "$\{{ contains(needs.*.result, 'cancelled') }}" == "true" ]]; then
            result="Builds cancelled."
          else
            result="Success!"
          fi
          echo "result=$result" >> $GITHUB_OUTPUT