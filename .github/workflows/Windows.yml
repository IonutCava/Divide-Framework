name: Windows Builds

on:
  schedule:
    - cron: "0 0 * * *"
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      runner_type:
        description: 'Runner type to run on (GitHub or Self Hosted)'
        required: false
        default: 'GitHub'
        type: choice
        options:
        - GitHub
        - self-hosted

run-name: Windows Build - ${{ github.ref_name }} - ${{ github.event.inputs.runner_type || 'GitHub' }}

jobs:
  check_date:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
    steps:
      - uses: actions/checkout@v4 
        with:
         fetch-depth: 1
         submodules: false
      - id: check
        uses: ./.github/actions/check-date

  info_job:
    needs: check_date
    if: ${{ needs.check_date.outputs.should_run != 'false' }}

    name: Windows latest - Print Info
    runs-on: ${{ github.event.inputs.runner_type == 'self-hosted' && fromJson('["self-hosted","Windows"]') || 'windows-latest' }}

    outputs:
      msvc_version: ${{ steps.msvc.outputs.msvc_version }}
      clang_version: ${{ steps.clang.outputs.clang_version }}

    steps:
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2
      
    - name: Print dev cmd info
      uses: ilammy/msvc-dev-cmd@v1
      with:
          arch: amd64
      
    - name: Print MSVC version
      id: msvc
      shell: cmd
      run: |
        cl 2>&1 | findstr "Version" > msvc_version.txt
        set /p MSVC_VERSION=<msvc_version.txt
        echo "msvc_version=%MSVC_VERSION%" >> %GITHUB_OUTPUT%

    - name: Print CLANG version
      id: clang
      shell: cmd
      run: |
        clang --version > clang_version.txt
        set /p CLANG_VERSION=<clang_version.txt
        echo "clang_version=%CLANG_VERSION%" >> %GITHUB_OUTPUT%

  build_msvc:
    needs: info_job
    name: Windows - msvc ${{ matrix.build-type }} ${{ matrix.configuration }}
    runs-on: ${{ github.event.inputs.runner_type == 'self-hosted' && fromJson('["self-hosted","Windows"]') || 'windows-latest' }}
    strategy:
      fail-fast: true
      matrix:
        build-type: [editor, game]
        configuration: [debug, release, profile]

    timeout-minutes: 180

    steps:
      - uses: actions/checkout@v4
 
      - uses: ./.github/actions/build-setup/windows
        with:
          runner_type: ${{ github.event.inputs.runner_type || 'GitHub' }}

      - uses: ./.github/actions/cmake-build/windows
        with:
          compiler: msvc
          build-type: ${{ matrix.build-type }}
          configuration: ${{ matrix.configuration }}

  build_clang:
    needs: info_job
    name: Windows - clang ${{ matrix.build-type }} ${{ matrix.configuration }}
    runs-on: ${{ github.event.inputs.runner_type == 'self-hosted' && fromJson('["self-hosted","Windows"]') || 'windows-latest' }}
    strategy:
      fail-fast: true
      matrix:
        build-type: [editor, game]
        configuration: [debug, release]

    timeout-minutes: 180

    steps:
      - uses: actions/checkout@v4
 
      - uses: ./.github/actions/build-setup/windows
        with:
          runner_type: ${{ github.event.inputs.runner_type || 'GitHub' }}

      - uses: ./.github/actions/cmake-build/windows
        with:
          compiler: clang
          build-type: ${{ matrix.build-type }}
          configuration: ${{ matrix.configuration }}

  output_job:
    needs: [info_job, build_msvc, build_clang]
    if: always()
    runs-on: windows-latest
    steps:
      - name: Retrieve results
        id: results
        shell: pwsh
        run: |
          $msvcResult = "${{ needs.build_msvc.result }}"
          $clangResult = "${{ needs.build_clang.result }}"
          $infoResult = "${{ needs.info_job.result }}"

          if ($msvcResult -eq "failure" -or $clangResult -eq "failure" -or $infoResult -eq "failure") {
            $status = "Build or Info job failed"
          } elseif ($msvcResult -eq "cancelled" -or $clangResult -eq "cancelled" -or $infoResult -eq "cancelled") {
            $status = "Build or Info job cancelled"
          } else {
            $status = "Success"
          }
          echo "status=$status" >> $env:GITHUB_OUTPUT

      - name: Generate Build Summary
        shell: pwsh
        run: |
          echo "## Build Summary" >> $env:GITHUB_STEP_SUMMARY
          echo "Status: ${{ steps.results.outputs.status }}" >> $env:GITHUB_STEP_SUMMARY
          echo "MSVC Version: ${{ needs.info_job.outputs.msvc_version }}" >> $env:GITHUB_STEP_SUMMARY
          echo "Clang Version: ${{ needs.info_job.outputs.clang_version }}" >> $env:GITHUB_STEP_SUMMARY
