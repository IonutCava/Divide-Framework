[Generic]
ERROR_UNKNOWN = Unknown error.

[Kernel]
START_NETWORK_INTERFACE = Initializing the networking interface.
START_RENDER_INTERFACE = Initializing the rendering interface.
CLOSING_RENDERER = Closing the rendering interface.
ERROR_GFX_DEVICE_API = Invalid Render API selected!
ERROR_SFX_DEVICE_API = Invalid Audio API selected!
ERROR_PFX_DEVICE_API = Invalid Physics API selected!
START_RENDER_LOOP = Preparing rendering loop ...
START_MAIN_LOOP = Starting main render loop ...
STOP_KERNEL = Shuting down the kernel.
STOP_ENGINE_OK = Engine shut down successfully!
INITIAL_DATA_LOADED = Initial data loaded ...
FRAMERATE_FPS_OUTPUT = <<<MULTILINE_TAG
FPS - Crt: {:.2f} Avg: {:.2f} / Max: {:.2f} / Min: {:.2f}
Average Frame Time: {:.2f} ms
MULTILINE_TAG
ERROR_FRAME_LISTENER_REMOVE = [FrameListener] Trying to remove nonexistant listener [ {} ].

[Application]
START_APPLICATION = Starting the application.
START_APPLICATION_CMD_ARGUMENTS = Specified command line arguments:
START_APPLICATION_CMD_ARGUMENTS_NONE = - None
START_APPLICATION_WORKING_DIRECTORY = Working directory set to: [ {} ].
START_APPLICATION_PROJECT_ARGUMENT = Project was specified via command line arguments [ {} ].
ERROR_APPLICATION_LOW_MEMORY =  The application is low on memory and will be force closed.
ERROR_APPLICATION_SYSTEM_CLOSE_REQUEST =  The application is being terminated by the OS.
WARN_APPLICATION_DRAG_DROP = The application does not yet support drag&drop. Operation ignored!
WARN_APPLICATION_TOUCH_EVENT = The application does not yet support touch events. Operation ignored!
WARN_APPLICATION_CLOSE = Application will now exit!
START_FRAMEWORK_EDITOR = Framework starting in editor mode! Initial project: [ {} ]
START_FRAMEWORK_GAME = Framework starting in game mode! Initial project: [ {} ]
STOP_APPLICATION = Application shutdown successful!
AVAILABLE_VIDEO_MODES = Display [ {} ] reports [{}] available display modes :
CURRENT_DISPLAY_MODE = Display mode: [ {} x {} ] - [ {} bpp - '{}'] - [ {} Hz] 
WINDOW_CLOSE_EVENT = Close request received for window [ {} ].
WINDOW_CLOSE_EVENT_ERROR = Failed to destroy window [ {} ]. Hiding the window instead.
SDL_VIDEO_DRIVER = SDL detected the following video driver: [ {} ]
SDL_ERROR = SDL encountered and error [ {} ]!
ERROR_SDL_WINDOW = SDL failed to create valid windows: {}
ERROR_SDL_LISTENER_NOTIFY = SDL: Listener [ {} ] did not respond correctly to SDL Event [ {} ]
SHUTDOWN_REQUEST = Engine shutdown request : {}\nDivide engine shutdown after {} engine steps and {} restart(s). Total time: {} seconds.
GENERIC_ERROR = Error detected: [ {} ].

[Threading]
TASK_COMPLETE_IN_THREAD = Finished task [ {} ] on thread [ {} ]
TASK_DELETE_ACTIVE = Tried to delete an active thread! Stop the thread first!
TASK_SCHEDULE_FAIL = The current task could not be registered with the threadpool specified on the first try! Retry count: {}

[Input]
INPUT_EFFECT_TEST_FAIL = The device can't play any effect of the test set.
INPUT_DEVICE_EFFECT_SUPPORT = Selected device can play the following effects:
INPUT_NO_JOYSTICK_SELECTED = No Joystick selected.
INPUT_NO_PLAYABLE_EFFECTS = No playable effects.
INPUT_PRINT_EFFECT = * #{} : {}.
INPUT_CREATE_OK = {} created.
INPUT_CREATE_START = Initializing input system.
INPUT_CREATE_BUFF_JOY = Created buffered joystick # {} '{}' (Id='{}')
INPUT_JOY_NUM_FF_AXES =  * Number of force feedback axes : {}
INPUT_JOY_SUPPORTED_EFFECTS =  * Supported effects :
ERROR_INPUT_CREATE_KB = Exception raised on keyboard creation: {}
ERROR_INPUT_CREATE_JOYSTICK = Exception raised on joystick creation: {}
ERROR_INPUT_CREATE_MOUSE = Exception raised on mouse creation: {}
WARN_INPUT_NO_FORCE_FEEDBACK = InputInterface: No Force Feedback device detected.
WARN_INPUT_NO_SUPPORTED_EFFECTS = Warning: no supported effect found!
WARN_INPUT_NO_FF_EFFECTS = Warning: no force feedback effect found!

[Networking]
CLIENT_EXCEPTION = [NETWORK CLIENT] Exception: [ {} ].
CLIENT_MSG_SEND = [NETWORK CLIENT] Sending msg with OPCode [ {} ].
CLIENT_MSG_RECEIVE = [NETWORK CLIENT] Received msg with OPCode [ {} ].
CLIENT_FAIL_SAVE_FILE = [NETWORK CLIENT] Received file failed to save to disk: [{} / {}. Size: {}]
CLIENT_ON_RECEIVE_PONG = [NETWORK CLIENT] Received PONG reply with timestamps [ Client: {} ms | Server: {} ms]!
CLIENT_ON_RECEIVE_MSG = [NETWORK CLIENT] Received MSG from client [ {} ]!
CLIENT_ON_RECEIVE_ENTITY_UPDATE = [NETWORK CLIENT]  Received entity update for GUID [ {} ] from client [ {} ] on frame [ {} ]!
CLIENT_ON_RECEIVE_FILE_DATA = [NETWORK CLIENT] Received file data: [ {} / {} ] Size: [ {} ].
CLIENT_ON_RECEIVE_FILE_DATA_ERROR = [NETWORK CLIENT] Server file data error: [ {} / {} ]!
SERVER_EXCEPTION = [NETWORK SERVER] Exception: [ {} ].
SERVER_STARTED = [NETWORK SERVER] Server started!
SERVER_STOPPED = [NETWORK SERVER] Server stopped!
SERVER_NEW_CONNECTION = [NETWORK SERVER]  New incoming connection from endpoint: {}
SERVER_NEW_CONNECTION_ACCEPTED = [NETWORK SERVER] Accepted connection with ID: {}.
SERVER_NEW_CONNECTION_DENIED = [NETWORK SERVER] Denied incoming connection!
SERVER_CLIENT_DISCONNECTED = [NETWORK SERVER] Removed client [ {} ]!
SERVER_FAIL_OPEN_FILE = [NETWORK SERVER] failed to open file [ {} ].
SERVER_ON_RECEIVE_HEARTBEAT = [NETWORK SERVER] Received heartbeat with code [ {} ] from client [ {} ]!
SERVER_ON_RECEIVE_PING = [NETWORK SERVER] Received PING message with timestamp [ {} ms ] from client [ {} ]. Responding with PONG
SERVER_ON_RECEIVE_MSG_ALL = [NETWORK SERVER] Broadcasting message from [ {} ] to all other clients!
SERVER_ON_RECEIVE_ENTITY_UPDATE = [NETWORK SERVER] Broadcasting entity update from [ {} ] for guid [ {} ] to all other clients!
SERVER_ON_RECEIVE_NOP = [NETWORK SERVER] Sending dummy message!
NETWORK_ERROR_CODE_ERROR = [NETWORK CLIENT/SERVER] Network error code: [ {} ].

[ConsoleCommands]
CONSOLE_SAY_NAME_TAG = You: {}.
CONSOLE_INVALID_COMMAND = [ {} ] is an invalid command.
CONSOLE_INVALID_NUMBER = The specified argument is not a valid number.
CONSOLE_QUIT_COMMAND_ARGUMENT = Quit command argument: {}.
CONSOLE_INVALID_HELP_ARGUMENT = Command not found. See list below.
HELP_CONSOLE_COMMAND = Available console commands:
CONSOLE_SAY_COMMAND_HELP = Outputs text in the format [name]: [text].
CONSOLE_QUIT_COMMAND_HELP = Exits the application. Any argument passed will be printed as a quit reason.
CONSOLE_HELP_COMMAND_HELP = Displays a list of available commands or information about the command used as argument.
CONSOLE_PLAYSOUND_COMMAND_HELP = Plays the specified sound file. Root directory is the "assets" folder location.
CONSOLE_NAVMESH_COMMAND_HELP = Recursively creates a navmesh based on scene geometry. Additional parameter: the root SceneGraphNode to start from.
CONSOLE_SHADER_RECOMPILE_COMMAND_HELP = Recompile the specified shader or all shaders that have names starting with the specified string.
CONSOLE_CHANGE_FOV_COMMAND_HELP = Change the horizontal FoV in the range 40 - 140.
CONSOLE_ADD_OBJECT_COMMAND_HELP = Add the specified object, either a predefined type such as Box3D, Sphere3D,etc or a mesh file from the "models" subfolder, copying the camera's location and orientation. Specify a radius / size / scale as the second argument (comma separated).
CONSOLE_PLAY_SOUND_INVALID_FORMAT = Specified audio file does not have a valid format for playback.
CONSOLE_PLAY_SOUND_INVALID_FILE = Specified audio file does not exist.
CONSOLE_NAVMESH_NO_NODE = Specified SceneGraphNode [ {} ] not found. NavMesh creation stopped.

[XML]
XML_SAVE_SCENE_START = Saving scene [ {} ]
XML_SAVE_SCENE_END = Saved scene [ {} ]
XML_LOAD_SCRIPTS = Loading Scripts!
XML_LOAD_CONFIG = Loading Configuration settings file: [ {} ]
XML_LOAD_SCENE = Loading scene [ {} ]
XML_LOAD_TERRAIN = Loading terrain: [ {} ]
XML_LOAD_MUSIC = Loading music: [ {} ]
XML_LOAD_GEOMETRY = Loading Geometry: [ {} ]
XML_LOAD_MATERIAL = Loading material from XML file [ {} ]
XML_TERRAIN_COUNT = Number of terrains to load: {}
XML_LOAD_DEFAULT_KEY_BINDINGS = Loading default key bindings from file: [ {} ]
ERROR_XML_INVALID_FILE = Invalid file! Could not load [ {} ] Error: [ {} ]
ERROR_XML_LOAD_INVALID_SCENE = XML: Trying to load unsupported scene! Exiting ...
ERROR_XML_INVALID_U_PARAM = Invalid U-map parameter for [ {} ]
ERROR_XML_INVALID_V_PARAM = Invalid V-map parameter for [ {} ]
ERROR_XML_INVALID_W_PARAM = Invalid W-map parameter for [ {} ]
ERROR_XML_INVALID_MIN_FILTER = Invalid min filter parameter for [ {} ]
ERROR_XML_INVALID_MAG_FILTER = Invalid mag filter parameter for [ {} ]

[Resources]
STOP_RESOURCE_CACHE = Emptying the resource cache ...
WARN_RESOURCE_LEAKED = Resource not unloaded properly at shutdown: [ {} : {} ]
RESOURCE_CACHE_ALLOCATE = Allocating resource [{}] of type [ {} ]. GUID: [ {} ]. Hash: [{}]. Total load time: [ {:5.2f}ms ].
RESOURCE_CACHE_ALLOCATE_FAILED = Allocating resource [ {} ] failed!  Total load time: [ {:5.2f}ms ]
RESOURCE_CACHE_BUILD    = Building resource [{}] of type [ {} ]. GUID: [ {} ]. Hash: [{}]. Total load time: [ {:5.2f}ms ].
RESOURCE_CACHE_BUILD_FAILED    = Resource [ {} ] building failed! Total load time: [ {:5.2f}ms ]
RESOURCE_CACHE_GET_RES_INC = Increasing ref count for resource [ {} ] to [ {} ]
RESOURCE_CACHE_REM_RES_DEC = Decreasing ref count for resource [ {} ] to [ {} ]
RESOURCE_CACHE_GET_RES = Loading resource [ {} ] [ {} ]
RESOURCE_CACHE_REM_RES = Removing resource: [ {} ] [ {} ]
ERROR_RESOURCE_CACHE_LOAD_RES = Resource creation failed!
RESOURCE_CACHE_POOL_TYPE = Resource pool of type [ {} ].
ERROR_RESOURCE_CACHE_LOAD_RES_NAME = Resource [ {} ]creation failed!
ERROR_RESOURCE_CACHE_UNKNOWN_RESOURCE = Trying to remove a resource that was either unloaded previously or wasn't loaded with the ResourceCache!
ERROR_RESOURCE_REM = Resource [ {} ] [ {} ] not unloaded successfully!

[ImageLoading]
ERROR_TEXTURE_LOADER_ARRAY_INIT_COUNT = Wrong number of texture layers for array texture: [ {} ]
TEXTURE_HAS_TRANSPARENCY_TRANSLUCENCY = Texture [ {} ] has transparent pixels [ {} ] / translucent pixels: [ {} ]
ERROR_TEXTURE_LOADER_CUBMAP_INIT_COUNT = Wrong number of files for cubemap texture: [ {} ]
ERROR_TEXTURE_LOADER_FILE = Could not load texture file [ ({}){} ] resource [ {} ]
ERROR_TEXTURE_LOAD = Unable to load texture [ {} ]
ERROR_TEXTURE_LAYER_LOAD = Unable to load texture layer [ {} ]. Missing texture can't be applied!
ERROR_IMAGETOOLS_INVALID_IMAGE_FILE = The specified file [ {} ] is not a valid image file. Error: [ {} ].
WARN_IMAGETOOLS_RGB_FORMAT = The specified file [ {} ] is stored as RGB. Only R, RG and RGBA are supported. Adding dummy alpha channel!
ERROR_IMAGE_TOOLS_NVT_FORMAT = NVTT Error: Invalid or not supported format!
ERROR_IMAGE_TOOLS_DDS_LOAD_ERROR = Failed to load DDS file [ {} ]
ERROR_IMAGE_TOOLS_DDS_DELETE_ERROR = Failed to delete DDS file [ {} ]
ERROR_IMAGE_TOOLS_NVT_ERROR = NVTT Error: [ {} ]!
ERROR_IMAGE_TOOLS_DEVIL_ERROR = Devil error: [ {} ]!
ERROR_IMAGE_TOOLS_FORMAT_ERROR = NVTT error: Tried to get NVTT format for unsupported source format: [ {} ]! Defaulting to BC4/5/7.
[GUI]
STOP_GUI = Shutting down graphical user interface ...
GUI_EDITOR_INIT = Creating the World Editor user interface ...
GUI_CONSOLE_CREATED = Console window created!
GUI_EDITOR_CREATED = WorldEditor window created!
ERROR_CONSOLE_LAYOUT_FILE = Could not load console from layout file [ {} ]!
ERROR_EDITOR_LAYOUT_FILE = Could not load editor from layout file [ {} ]!
ERROR_CONSOLE_DOUBLE_INIT = Tried to initialize the GUI Console twice!
ERROR_EDITOR_DOUBLE_INIT = Tried to initialize the GUI WorldEditor twice!
ERROR_GUI_DOUBLE_INIT = Tried to initialize the GUI twice!
ERROR_CEGUI_DESTROY = CEGUI: System destruction threw an exception!
ERROR_CEGUI_SDL_UTF = CEGUI: Could not initialize SDL_iconv for UTF-8 to UTF-32!
ERROR_CEGUI_UTF_CONVERSION = CEGUI: Converting UTF-8 string from SDL_TEXTINPUT to UTF-32 failed!
WARN_ADAPTIVE_SYNC_NOT_SUPPORTED = [WindowManager] Could not enable adaptive sync! Falling back to regular VSync.
ERROR_FONT_FILE =  FONT-STASH: Unable to open font file {}.
ERROR_FONT_HEIGHT = FONT-STASH: Unable to set font face size {}.
ERROR_FONT_INIT = FONT-STASH: Unable to create a valid context;

[GFXDevice]
ERROR_APPLICATION_RENDER_TARGET_RESET = The render targets have been reset and their contents need to be updated.
ERROR_APPLICATION_RENDER_DEVICE_RESET = The device has been reset and all textures need to be recreated.
START_D3D_API = Initializing Direct3D rendering API!
START_OGL_API_OK = OpenGL rendering system initialized!
ERROR_INSUFFICIENT_TEXTURE_UNITS = OpenGL: Insufficient number of texture image units available on current hardware!
ERROR_INSUFFICIENT_ATTRIB_BINDS = OpenGL: Insufficient number of attribute binding locations available on current hardware!
ERROR_OPENGL_VERSION_TO_OLD = OpenGL version 4.6 is required for OpenGL rendering.
ERROR_VK_INIT = Failed to initialise Vulkan renderer [ {} ].
ERROR_GFX_LEAKED_RESOURCES = Device leaked {} resource(s) during shutdown!
WARN_SWITCH_API = Try switching to a different rendering API (D3D12,Vulkan,etc) or upgrade video driver and/or gpu.
ERROR_RT_ATTACHMENT_INCOMPLETE = RenderTarget incomplete: Attachment is NOT complete.
ERROR_RT_NO_IMAGE = RenderTarget incomplete: No image is attached to FB.
ERROR_RT_DIMENSIONS = RenderTarget incomplete: Attached images have different dimensions.
ERROR_RT_FORMAT = RenderTarget incomplete: Colour attached images have different internal formats.
ERROR_RT_INCOMPLETE_DRAW_BUFFER = RenderTarget incomplete: Draw buffer.
ERROR_RT_INCOMPLETE_READ_BUFFER = RenderTarget incomplete: Read buffer.
ERROR_RT_UNSUPPORTED = RenderTarget incomplete: Unsupported by FB implementation.
ERROR_RT_INCOMPLETE_MULTISAMPLE = RenderTarget incomplete: Incomplete multisample buffer.
ERROR_RT_INCOMPLETE_LAYER_TARGETS = RenderTarget incomplete: Incomplete layer targets;
ERROR_RT_DOUBLE_BIND = Detected double bind request on FB with same texture and unit without unbind
ERROR_RT_INVALID_UNBIND = Detected unbind call without previous bind
ERROR_VB_INIT = Init VB failed!
ERROR_VAO_INIT = Init VAO failed!
ERROR_IB_INIT = Init IB failed!
ERROR_VB_POSITION = No position data!
ERROR_BUFFER_LOCK_MANAGER_WAIT = Wait for locked buffer range timed out!
GL_FB_GEN_DEPTH = Generating depth buffer of dimensions [{} x {}]
GL_FB_GEN_DEPTH_ARRAY = Generating depth buffer with array textures of dimensions [{} x {}]
GL_FB_GEN_COLOR = Generating frame buffer of dimensions [{} x {}]
GL_FB_GEN_COLOR_ARRAY = Generating frame buffer with array textures of dimensions [{} x {}]
GL_FB_GEN_DEFERRED = Generating deferred buffer of dimensions [{} x {}]
ERROR_RT_ATTACHMENT_DIFFERENT = RenderTarget: Attachment [ {} ] has an unsupported texture type for this FB!
ERROR_PB_INVALID_TYPE = Invalid texture type received on PB creation
GL_SHADER_THREADS = Number of GLSL compiler/linker threads: {}
GL_MAX_UNIFORM = Max GLSL fragment uniform components supported: {}
GL_MAX_VERT_UNIFORM = Max GLSL vertex uniform components supported: {}
GL_MAX_FRAG_AND_VERT_UNIFORM = Max GLSL combined vertex + fragment uniform components supported: {}
MAX_MESH_OUTPUT_VERTICES = Max GLSL mesh shader output vertices: {}
MAX_MESH_OUTPUT_PRIMITIVES = Max GLSL mesh shader output primitives: {}
MAX_MESH_SHADER_WORGROUP_INFO = Max GLSL mesh shader worgroup counts - sizes: [{} x {} x {}] - [{} x {} x {}]. Max invocations: {}
MAX_TASK_SHADER_WORGROUP_INFO = Max GLSL task worgroup counts - sizes: [{} x {} x {}] - [{} x {} x {}]. Max invocations: {}
MAX_VERTEX_OUTPUT_COMPONENTS = Max GLSL vertex output components supported: {}
GL_MAX_VERT_ATTRIB = Max GLSL vertex attributes supported: {}
MAX_COMPUTE_WORK_GROUP_INFO = Max GLSL compute worgroup counts - sizes: [{} x {} x {}] - [{} x {} x {}]. Max invocations: {}
MAX_COMPUTE_SHARED_MEMORY_SIZE = Max GLSL compute shared memory: {} Kb
GL_MAX_TEX_UNITS = Max Combined Texture Units supported: {}. Max texture units per stage: {}
GL_MAX_TEX_UNITS_FRAG = Max Texture Units supported in frag shader: {}
GL_MAX_VERSION = Hardware acceleration for OpenGL {}.{} supported!
GL_GLSL_SUPPORT = GLSL version supported: [ {} ]
GL_VENDOR_STRING = <<<MULTILINE_TAG
- Video hardware vendor: [ {} ]
- Rendering platform: [ {} ] 
- Version [ {} ]
MULTILINE_TAG
VK_VENDOR_STRING = <<<MULTILINE_TAG
- Device Name: [ {} ]
- Vendor ID: [ {} ] 
- Device ID: [ {} ]
- Driver Version: [ {} ]
- API Version: [ {} ]
MULTILINE_TAG
VK_TOOL_INFO = Vulkan: Detected [ {} ] tools:
GL_VK_UBO_INFO = Max uniform buffer bindings [ {} ]. Max UBO block size [ {} {} ]. Offset alignment [ {} ]
GL_VK_SSBO_INFO = Max shader storage buffer bindings [ {} ]. Max SSBO block size [ {} Mb ]. Max SSBO combined blocks [ {} ]. Offset alignment [ {} ]
GL_SUBROUTINE_INFO = Max Subroutines: [ {} ]. Max Subroutine Uniforms: [ {} ]
GL_LINE_WIDTH_INFO = GL Line Width Range [ {} - {} ]
ERROR_GL_NO_TEXTURE_ARRAY = [glDepthArrayBuffer] No Texture Array Support!
ERROR_GL_LOCK_WAIT_TIMEOUT = [glLockManager] Wait Error: Lock Timeout!
ERROR_GL_LOCK_WAIT_RETRY = [glLockManager] Wait [Offset: {}, Length: {}, Retries: {}.
ERROR_GENERIC_GL = An internal OpenGL call failed on call [ {} ]: [ {} ]
ERROR_GENERIC_VK = An internal Vulkan call failed with error: [ {} ]
ERROR_VK_PIPELINE_CACHE_SAVE = Failed to save pipeline cache to disk! [ {} ]
ERROR_VK_PIPELINE_CACHE_LOAD = Failed to load pipeline cache from disk! [ {} ]
WARN_VK_DEDICATED_QUEUE = Failed to find a dedicate queue of type [ {} ][ {} ]
ERROR_VK_DEDICATED_QUEUE = Failed to find a dedicate queue of type [ {} ][ {} ]
ERROR_VK_PIPELINE_GRAPHICS_FAILED = Failed to create graphics pipeline!
ERROR_VK_PIPELINE_COMPUTE_FAILED = Failed to create compute pipeline!
ERROR_GFX_INVALID_OBJECT_TYPE = [GFXDevice] Invalid Object3D type received for object: [ {} ]
ERROR_NO_SAMPLER_OBJECT_FOUND = [GLWrapper] No sampler object available for specified hash value [ {} ]
ERROR_TEXTURE_MATRIX_ACCESS = [GFXDevice] Texture matrix requested but unsupported yet!
ERROR_GFX_INVALID_COMMAND_BUFFER = [GFX::CommandBuffer] Invalid command buffer detected. [ error: {} ] [ {}:{} ]: {}
WARNING_REPLACING_RT_ATTACHMENT = Replacing Render Target [ {} ] attachment ({} - {})
DEFERRED_RT_DELETE = Deleting Deferred Rendering RenderTarget!
ERROR_GFX_DEVICE = [ {} ]

[SFXDevice]
START_SOUND_INTERFACE = Initializing the sound interface.
ERROR_SDL_LOAD_SOUND = Can't load sound [ {} ] with SDL!
ERROR_SDL_CANT_PLAY = Can't play sound [ {} ] with SDL! [ {} ].

[PFXDevice]
START_PHYSICS_INTERFACE = Initializing the physics interface.
START_PHYSX_API = Initializing the PhysX engine!
CONNECT_PVD_OK = Connection with the PhysX Visual Debugger returned [ {} ].
STOP_PHYSX_API = Stopping PhysX device!
ERROR_ACTOR_CAST = Tried to add unknown actor type to SceneGraph node [ {} ]!
ERROR_START_PHYSX_API = Error creating PhysX device!
ERROR_EXTENSION_PHYSX_API = PxInitExtensions failed!
ERROR_PHYSX_CREATE_PLANE = PhysX error creating plane!
ERROR_PHYSX_CREATE_PLANE_SHAPE = PhysX error creating shape for plane!
ERROR_PHYSX_CREATE_BOX = PhysX error creating box!
ERROR_COOK_TRIANGLE_MESH = PhysX error cooking triangle mesh! [ {} ].
ERROR_CREATE_TRIANGLE_MESH = PhysX error creating triangle mesh!
ERROR_PHYSX_GENERIC = PhysX internal error of type [{}] Msg: [ {} ] File: [{}] Line: [{}].
COLLISION_MESH_LOADED_FROM_FILE = Loading collision mesh from cached file [ {} ].
COLLISION_MESH_LOADED_FROM_RAM = Loading collision mesh from ram cache [ {} ].
START_PHYSX_API_OK = PhysX Engine initialized!
STOP_PHYSX_SCENE_INTERFACE = Shutting down PhysXSceneInterface
ERROR_PHYSX_INTERFACE_SDK = PhysX SDK not initialized!
ERROR_PHYSX_INTERFACE_CPU_DISPATCH = PhysX PxDefaultCpuDispatcherCreate failed!
ERROR_PHYSX_INTERFACE_CREATE_SCENE = PhysX error creating scene!
STOP_PHYSICS_INTERFACE = Closing physics interface!

[OpenCL]
START_OPENCL_BEGIN = Initializing OpenCL interface! Platform details:
START_OPENCL_END = Interface initialized!
STOP_OPENCL = Closing interface!

[Shaders]
GLSL_VALIDATING_SHADER = Validating shader [ {} ][ {} ]: {}  [guid: {}]
GLSL_VALIDATING_PROGRAM = Validating program pipeline [ {} ][ {} ]: {}
GLSL_LOAD_PROGRAM = Loading program [ {} ] guid [ {} ]
GLSL_LINK_PROGRAM_LOG = <<<MULTILINE_TAG
Program [ {} ] linked:
-- {}
MULTILINE_TAG
GLSL_LINK_PROGRAM_LOG_OK = Program [ {} ] linked: {} guid [ {} ] handle [ {} ]
WARN_GLSL_NO_TESSELLATION = Tessellation not yet implemented
ERROR_GLSL_COMPILE = Could not compile shader [ {} ] [ {} ] [ {} ] [ {} ]
ERROR_GLSL_INCLUD_LIMIT = Header inclusion depth limit reached, might be caused by cyclic header inclusion
ERROR_GLSL_NOT_FOUND = Shader [ {} ] not found!
ERROR_GLSL_NO_INCLUDE_FILE = {} ({}): fatal error: cannot open include file [ {} ]
ERROR_GLSL_CREATE_PROGRAM = Could not create shader program [ {} ]
ERROR_GLSL_PARSE_ERROR_NAME_SHORT = Preprocessing issue for file [ {} ].
ERROR_GLSL_PARSE_ERROR_MSG = [ {} ]
SHADER_TIMING_INFO = <<<MULTILINE_TAG
GLSL shader [{}] pipeline [{}] compiled:
- Total time: {:5.5f} ms 
- Link time: {:5.5f} ms 
- Link log time: {:5.5f} ms  
- Stage hotspot: {}
--- [Stage] - [Compile time] - [Log time]
{}
MULTILINE_TAG
ERROR_SHADER_RECOMPILE_FAILED = Failed to recompile program [ {} ]
ERROR_SHADER_CONVERSION_SPIRV_FAILED = Failed to convert GLSL to SPIRV for shader [ {} ] 
ERROR_SHADER_SAVE_SPIRV_FAILED = Failed to save SPIRV code to file for shader [ {} ] 
ERROR_SHADER_REFLECTION_SPIRV_FAILED = Failed to get reflection data from specified SPIRV binary [ {} ]
ERROR_SHADER_SAVE_TEXT_FAILED = Failed to save TEXT code to file for shader [ {} ] 
ERROR_SHADER_SAVE_REFL_FAILED = Failed to save Reflection code to file for shader [ {} ] 
ERROR_SHADER_LOAD_SOURCE_CODE_FAILED = Failed to load source code for shader stage [ {} ]. Issued by reload: [ {} ]
SHADER_DELETE = Deleting Shader  [ {} ]
SHADER_PROGRAM_REMOVE = [ShaderManager] Removing shader program [ {} ]
SHADER_MODULE_EXPIRED = [ShaderManager] Removing expired shader module [ {} ]
ERROR_INVALID_DEFINE_DELETE = Tried to remove invalid define [ {} ] for current program [ {} ].
ERROR_INVALID_UNIFORM_ADD = Tried to add the same uniform twice [ {} ] from shader of type [ {} ] of program [ {} ]
ERROR_INVALID_UNIFORM_DELETE = Tried to remove invalid uniform [ {} ] from shader of type [ {} ] of program [ {} ]
ERROR_RECOMPILE_NOT_FOUND = Could not find shader program [ {} ] for recompile command.
SHADER_MANAGER_GET_INC = Returning shader [ {} ].
WARNING_MANAGER_DOUBLE_INIT = init() called twice!
ERROR_GLSL_INVALID_BIND = Could not bind shader [ id = {} | generation: {} ].
ERROR_GLSL_INVALID_HANDLE = Could not find shader [ id = {} | generation: {} ].
ERROR_GLSL_INVALID_PUSH_CONSTANTS = Could not upload push constants as the current active pipeline is invalid.

[Rendering]
ERROR_GFX_DEVICE_INVALID_FB_CUBEMAP = Trying to generate cubemap in invalid FB type!
ERROR_GFX_DEVICE_INVALID_FB_DP = Trying to generate dual paraboloid mapping with invalid FB type!
START_POST_FX = Initializing the post-processing interface.
STOP_POST_FX = Closing post-processing interface!
ERROR_BLOOM_INPUT_FB = Bloom Operator - no input FB.
ERROR_DOF_INPUT_FB = DoF Operator - no input FB.
ERROR_TEXTURE_DATA_CONTAINER_CONFLICT = [TextureData] Multiple textures for the same bind slot specified in the container. Please split render sub passes to correct this!
ERROR_INVALID_RENDER_BIN_SORT_ORDER = RenderBin [{}]: Invalid rendering order!
ERROR_INVALID_RENDER_BIN_CREATION = RenderQueue: Tried to create an invalid render bin!

[Scene]
WARNING_NO_PREV_SCENE_RENDER_STATE = Tried to restore a previous scene render state, but none was found!
ERROR_PROJECTS_LOAD = There was an error loading projects.
ERROR_PROJECT_LOAD = There was an error loading project [ {} ]
ERROR_SCENE_LOAD = There was an error loading scene [ {} ].
ERROR_SCENE_LOAD_NOT_CALLED = [ProjectManager] Scene::load() was not called by scene [ {} ].
ERROR_SCENE_LOAD_MODEL = Error loading model [ {} ].
ERROR_SCENE_UNSUPPORTED_GEOM = Error adding unsupported geometry to scene: [ {} ].
ERROR_SCENE_DELETE_NULL_NODE = Trying to delete NULL scene node!
WARN_PROJECT_NOT_FOUND = Project [ {} ] not found. Loading first available project: [ {} ].
WARN_PROJECT_CHANGE = Project [ {} ] will be unloaded and project [ {} ] will be loaded in its place.
STOP_SCENE_MANAGER = [ProjectManager] Unloading scenes and shutting down the scene manager!
CREATE_SKY_RES_OK = Generated sky cubemap and sun OK!
TREE_ADDED = Added tree [ {} ].
ERROR_ADD_TREE = Can't add tree: {}.
TERRAIN_INFO = Terrain width: {} and height: {}.
UNLOAD_VEGETATION_BEGIN =  Destroying vegetation for terrain [ {} ] ...
UNLOAD_VEGETATION_END =  ... destruction complete!
CREATE_GRASS_BEGIN =  Generating Grass...[ {} ].
CREATE_GRASS_END =  Generating Grass OK.
CREATE_TREE_START =  Generating Trees ... [ {} ].
CREATE_TREE_END =  Generating Trees OK.
WATER_CREATE_DETAILS_1 =  Water plane height placement: [ {} ].
WATER_CREATE_DETAILS_2 =  Water plane depth level: [ {} ].
REPLACE_MATERIAL = Replacing material [ {} ] with material  [ {} ].
ERROR_SCENE_GRAPH_REMOVE_NODE = Failed to remove node [ {} ].
DELETE_SCENEGRAPH = Deleting SceneGraph.
REMOVE_SCENEGRAPH_NODE = Removing SGN: {} ({}).
PRINT_SCENEGRAPH_NODE = {} (Resource: {}, Material: {} (Shader: {} , DepthShader: {}) ).
CAMERA_MANAGER_DELETE = [CameraManager] Deleting Camera Pool ...
ERROR_CAMERA_MANAGER_CREATION = [CameraManager] Camera creation failed!
SCENE_MANAGER_DELETE = [ProjectManager] Deleting Scene Manager ...
SCENE_MANAGER_REMOVE_SCENES = [ProjectManager] Removing all scenes and destroying scene manager ...
SCENE_MANAGER_LOAD_SCENE_DATA = [ProjectManager] Loading scene data ...
SCENE_ADD_DEFAULT_CAMERA = [ProjectManager] Adding default camera ...
STOP_SCENE_TASKS = Stopping all tasks ...
TOGGLE_SCENE_SKELETONS = Toggling Skeleton Visibility: {}
TOGGLE_SCENE_BOUNDING_BOXES = Toggling Bounding Boxes: {}
TOGGLE_SCENE_ORIENTED_BOUNDING_BOXES = Toggling Oriented Bounding Boxes: {}
TOGGLE_SCENE_BOUNDING_SPHERES = Toggling Bounding Spheres: {}
TOGGLE_SCENE_AXIS_GIZMO = Toggling Axis Gizmo
TERRAIN_LOAD_START = Loading terrain [ {} ]
TERRAIN_LOAD_END = Loading Terrain [ {} ] OK
ERROR_TERRAIN_LOAD = Error loading terrain [ {} ]
ERROR_TERRAIN_DESCRIPTOR_MISSING_VAR = [TerrainDescriptor] Accessing inexistent variable [ {} ]
ECS_SAVE_ERROR = ECS: Could not save system [ {} ] to cache
ECS_LOAD_ERROR = ECS: Could not load system [ {} ] from cache

[Lighting]
ERROR_LIGHT_INVALID_FLOAT_PROPERTY_REQUEST = Tried to get invalid float property for light id [{}]
ERROR_LIGHT_INVALID_VEC_PROPERTY_REQUEST = Tried to get invalid vector property for light id [{}]
ERROR_LIGHT_INVALID_SPLIT_COUNT = Invalid number of split planes requested for CSM system [ {} ]
ERROR_LIGHT_POOL_DUPLICATE = Light with ID: {} already exists in light map
ERROR_LIGHT_POOL_REMOVE_LIGHT = Could not remove light with ID: {}
ERROR_LIGHT_POOL_LIGHT_LEAKED = Not all lights have been removed properly!
WARNING_INVALID_PROPERTY_SET = Tried to set invalid property for light id [ {} ]
WARNING_INVALID_PROPERTY_GET = Tried to get invalid property for light id [ {} ]
WARNING_ILLEGAL_PROPERTY = Tried to set illegal property for light id [ {} ] of type [ {} ]. Property: [ {} ]
LIGHT_CREATE_SHADOW_FB = Creating the Frame Buffer Objects for Shadow Mapping using technique [ {} ]
LIGHT_INIT_SHADOW_FB = Initializing the Frame Buffer Objects for Shadow Mapping for Light [ {} ]

[Materials]
LOAD_DEFAULT_MATERIAL = [Loading default material from XML.
REPLACE_SHADER = Replacing shader [ {} ] with shader  [ {} ] Stage [ {} ] Pass [ {} ] Variant [ {} ].
MATERIAL_NO_DIFFUSE = Material [ {} ] does not have a diffuse colour!
MATERIAL_EXTRA_DIFFUSE = Material [ {} ] has more than 2 diffuse textures!
MATERIAL_NO_NAME_TEXTURE = Material [ {} ] has a texture assigned with no name! Slot [ {} ].
MATERIAL_TEXTURE_NOT_SUPPORTED = Material [ {} ] has an unsupported texture assigned [ {} ].
MATERIAL_WRONG_VERSION = Material [ {} ] couldn't be loaded from XML. Wrong version detected [ {} ]. Expected [ {} ].

[AssetImporter]
LOAD_ANIMATIONS_BEGIN = Extracting Animations ...
LOAD_ANIMATIONS_END = Finished loading animations with [ {} ] bones.
LOAD_MESH_TIME  = Model [ {} ] was imported in [ {:5.2f} ] milliseconds. Parsing started!
MESH_LOADED_FROM_FILE = Model [ {} ] was successfully imported from file!
MESH_NOT_LOADED_FROM_FILE = Model [ {} ] was not successfully imported from file! Using ASSIMP based import.
MESH_SAVED_TO_FILE = Model [ {} ] was successfully saved to file!
MESH_NOT_SAVED_TO_FILE = Model [ {} ] was not successfully saved to file!
PARSE_MESH_TIME = Model [ {} ] was parsed in [ {:5.2f} ] seconds.
CREATE_ANIMATION_BEGIN = Creating Animation named: [ {} ].
CREATE_ANIMATION_END = Finished Creating Animation named: [ {} ].
ERROR_BONE_FIND = Did not find the bone node [ {} ].
ERROR_IMPORTER_FILE = DVDConverter::load( {} ): {}.
SUBMESH_NO_TANGENT =SubMesh [ {} ] does not have tangent data!
SUBMESH_TOO_MANY_BONES = SubMesh [ {} ] has [ {} / {} ] bones.! All bones over index {} will be ignored!
SUBMESH_TOO_MANY_BONE_WEIGHTS = SubMesh [ {} ] has more than 4 weights per bone [ {} ]! All bones weights over index 4 will be ignored!
LOADED_0_LENGTH_ANIMATION = Error! Animation [ {} ] has a duration of 0!
MISSING_BONE_IN_SKELETON = Warning! Bone [ {} ] not found in skeleton!
BYTE_BUFFER_ERROR = ByteBuffer: Operation: {} , Crt Position: {}, Requested Size: {}, Total BufferSize: {}.

[Navigation]
NAV_MESH_GENERATION_START = Started creating nav mesh from [ {} ].
NAV_MESH_GENERATION_COMPLETE = Nav mesh creation completed in {:5.2f} seconds.
NAV_MESH_GENERATION_INCOMPLETE = Nav mesh creation failed. Elapsed time: {:5.2f} seconds.
NAV_MESH_CONFIG_NOT_FOUND = Nav mesh ini configuration file not found for the current scene.
NAV_MESH_ADD_NODE = Added [ {} ].
NAV_MESH_NODE_NO_DATA = Couldn't retrieve geometry data for node [ {} ].
NAV_MESH_BOUNDS = Nav mesh bounds are MAX [ {:5.2f} | {:5.2f} | {:5.2f} ] MIN [ {:5.2f} | {:5.2f} | {:5.2f} ].
NAV_MESH_CURRENT_NODE = Parsing node [ {} ] with detail [ {} ].
WARN_NAV_UNSUPPORTED = WARNING: Node [ {} ] is not of type [ TERRAIN | WATER | OBJECT3D ]. Skipped;
WARN_NAV_INCOMPLETE = WARNING! NavigationMesh Generation is not yet implemented!
WARN_WAYPOINT_NOT_FOUND = WARNING! Waypoint [ {} ] not found in graph [ {} ]
ERROR_DETOUR_CROWD_INSTANCE = [DetourCrowd] Could not allocate dtCrowd instance!
ERROR_RECAST_LEVEL = [NavigationMesh Generation] Unknown detail level [ {} ]
ERROR_NAV_UNKNOWN_NODE_FOR_ABSOLUTE = [NavigationMesh Generation] Absolute detail level requires either OBJECT3D type or TERRAINTYPE. Received type id [ {} ].
ERROR_NAV_PARSE_FAILED = [NavigationMesh Generation] Navigation Mesh creation starting from node [ {} ] failed.
ERROR_NAV_HEIGHTFIELD = Could not generate rcHeightField for NavigationMesh [ {} ]
ERROR_NAV_OUT_OF_MEMORY = Out of memory [ {} ] for NavigationMesh [ {} ]
ERROR_NAV_COMPACT_HEIGHTFIELD = Could not generate rcCompactHeightField for NavigationMesh [ {} ]
ERROR_NAV_WALKABLE = Could not erode walkable area for NavigationMesh [ {} ]
ERROR_NAV_REGIONS = Could not build regions for NavigationMesh [ {} ]
ERROR_NAV_COUNTOUR = Could not construct rcContourSet for NavigationMesh [ {} ]
ERROR_NAV_POLY_MESH = Could not construct rcPolyMesh for NavigationMesh [ {} ]
ERROR_NAV_POLY_MESH_DETAIL = Could not construct rcPolyMeshDetail for NavigationMesh [ {} ]
ERROR_NAV_MESH_DATA = Could not construct NavMeshData for NavigationMesh [ {} ]
ERROR_NAV_DT_OUT_OF_MEMORY = Out of memory allocating dtNavMesh for NavigationMesh [ {} ]
ERROR_NAV_DT_INIT = Could not initialize dtNavMesh for NavigationMesh [ {} ]
ERROR_NAV_NO_POLY_NEAR_POINTS = No NavMesh polygon near visit point ({}, {}, {}) of NavPath
RECAST_CTX_LOG_PROGRESS = [ReCast] {}
RECAST_CTX_LOG_WARNING = [ReCast Warning] {}
RECAST_CTX_LOG_ERROR = [ReCast Error] {}

[AI]
AI_DUPLICATE_SENSOR_INPUT_ERROR = Added a duplicate sensor entry!

[Scripting]
SCRIPT_CONSOLE_OUTPUT = Script output: [ {} ]
SCRIPT_EVAL_EXCEPTION = Eval exception [ {} ]
SCRIPT_OTHER_EXCEPTION = Exception [ {} ]
ERROR_SCRIPT_INCLUD_LIMIT = Header inclusion depth limit reached, might be caused by cyclic header inclusion
